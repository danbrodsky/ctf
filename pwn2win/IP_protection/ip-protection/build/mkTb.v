//
// Generated by Bluespec Compiler (build 03e603c)
//
// On Sat May 30 23:23:55 UTC 2020
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // register char
  reg [7 : 0] char;
  wire [7 : 0] char$D_IN;
  wire char$EN;

  // register dut_st
  reg [415 : 0] dut_st;
  wire [415 : 0] dut_st$D_IN;
  wire dut_st$EN;

  // register sz
  reg [2 : 0] sz;
  wire [2 : 0] sz$D_IN;
  wire sz$EN;

  // remaining internal signals
  wire [7 : 0] char_upd__h254;

  // register char
  assign char$D_IN = char_upd__h254 ;
  assign char$EN = 1'd1 ;

  // register dut_st
  assign dut_st$D_IN = { dut_st[414:0], 1'd0 } ;
  assign dut_st$EN = 1'd1 ;

  // register sz
  assign sz$D_IN = sz + 3'd1 ;
  assign sz$EN = 1'd1 ;

  // remaining internal signals
  assign char_upd__h254 = { char[6:0], dut_st[415] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        char <= `BSV_ASSIGNMENT_DELAY 8'hAA;
	dut_st <= `BSV_ASSIGNMENT_DELAY
	    416'h4D7C2AF706687E5579DAEE17D3855F7C0C1F95D1D300A9DC4F11AD9BF8A61E8F62753E6F809FE81FD8F1D9738A368305728D913E;
	sz <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (char$EN) char <= `BSV_ASSIGNMENT_DELAY char$D_IN;
	if (dut_st$EN) dut_st <= `BSV_ASSIGNMENT_DELAY dut_st$D_IN;
	if (sz$EN) sz <= `BSV_ASSIGNMENT_DELAY sz$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    char = 8'hAA;
    dut_st =
	416'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    sz = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    $display("invalid license key");
    $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (sz == 3'd7 && char_upd__h254 != 8'd0) $write("%c", char_upd__h254);
    if (RST_N != `BSV_RESET_VALUE)
      if (sz == 3'd7 && char_upd__h254 == 8'd0) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (sz == 3'd7 && char_upd__h254 == 8'd0) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkTb

